# Check for missing data
sum(is.na(Hitters$Salary))
# Data preparation:
#   For this assignment
#   omit rows with missing data
#
#   Sometimes the missing data
#   has a story to tell
Hitters=na.omit(Hitters)
dim(Hitters)
sum(is.na(Hitters)) # quick check
# Below is a default splom
# showing both continuous and
# categorical data
# 1.1 First quick scatterplot matrix
windows(width=9,height=9)
splom(Hitters)
# 1.2 A second scatterplot matrix with hexagon binning
#     and smooths
# We take control
# We remove the three categorical variables,
# in column 14, 15, and 20 to gain resolution
#
# We show grid lines, hexagon bins, and loess
# smooths with some adjusted parameters
#
# Set pscale to 0 for no tick marks and labels
# Set varname.col to "red" varname.cex=0.4
# Set hexbinplot xbins to 12 (default 30)
# Set the trans function to x^1
windows(width=9,height=9)
splom(Hitters[,-c(14,15,20)],
xlab='',main="Hitters Data ",
pscale=0, varname.col="red", varname.cex=0.4,
axis.text.cex=0.3, # here
axis.text.col="red",axis.text.font=2,
axis.line.tck=.5,
panel=function(x,y,...){
panel.grid(h=-1,v=-1,...)
panel.hexbinplot(x,y,xbins=12,...,
border=gray(.7),trans=function(x)x^1) # here
panel.loess(x , y, ..., lwd=2,col='purple')
},
diag.panel = function(x, ...){
yrng <- current.panel.limits()$ylim
d <- density(x, na.rm=TRUE)
d$y <- with(d, yrng[1] + 0.95 * diff(yrng) * y / max(y) )
panel.lines(d,col=gray(.8),lwd=2)
diag.panel.splom(x, ...)
}
)
splom(Hitters[,c(1,2,6,8,11:13,16,17,19)],
xlab='',main="Hitters Data ",
pscale=0, varname.col="red", varname.cex=0.6,
axis.text.cex=0.4, # here
axis.text.col="red",axis.text.font=2,
axis.line.tck=.5,
panel=function(x,y,...){
panel.grid(h=-1,v=-1,...)
panel.hexbinplot(x,y,xbins=12,...,
border=gray(.7),trans=function(x)x^1) # here
panel.loess(x , y, ..., lwd=2,col='purple')
},
diag.panel = function(x, ...){
yrng <- current.panel.limits()$ylim
d <- density(x, na.rm=TRUE)
d$y <- with(d, yrng[1] + 0.95 * diff(yrng) * y / max(y) )
panel.lines(d,col=gray(.8),lwd=2)
diag.panel.splom(x, ...)
}
)
regfit.full=regsubsets(Salary~.,Hitters)
reg.summary <- summary(regfit.full)
reg.summary
mat <- reg.summary$outmat
mat
rownames(mat)
mat[1,]
# The first row indicates fitting
# also fitting CRBI,
# the career runs batted in.
#
# The second row has two additional
# variables and so on.
# We will use just the
# integer part for the row names.
rownames(mat) <- 1:nrow(mat)
# Focus on the the best models with
# 1 to 8 variables
mat<- mat[1:8,]
mat
# convert matrix to logical values
matL <- ifelse(mat==" ",FALSE,TRUE)
# Transpose the matrix
matLT <- t(matL)
matLT
# Keep just the variables appearing
# in the first 8 models
#
# The apply function will operatve
# on the data matrix in the first argument.
# The 2nd argument of 1 applies
# the 3rd argument to eah row
# of the matrix.
#
# The function any() below
# works on a logical vector.
# If any element in a row is TRUE
# the function returns TRUE.
usedVar <- apply(matLT,1,any)
matLT <-matLT[usedVar,]
matLT
# Sort the remaining variables by
# the number of time used rows
usedN <- apply(matLT,1,sum)
matLT <- matLT[order(usedN,decreasing=TRUE),]
# Find the number of rows and
# columns used to set up
# axes for the plot
nModel <- ncol(matLT)
nVar <- nrow(matLT)
rx <- c(.5,nModel+.5)
ry <- c(.5,nVar+.5)
## Select and run lines
#  from here to
#  ##End==============
windows(width=4.5,height=4)
# Set the plot margins in inches
# bottom, left, top, right
# and save the previous setting
oldPar <- par(mai=c(.2,1.3,1.1,.2))
# Just setup the plot
plot(rx,ry,type='n',axes=FALSE,
xlab='', ylab='', cex=.85,
main=paste("Best 8 Salary Models",
"with a Mean and 1 to 8 Variables",sep="\n"))
# Construct coordinates for rows
# and columns. Omit those with
# FALSE in the matrix and
# plot the remaining points
xy <- expand.grid(list(x=1:nModel,y=nVar:1))
xy <- xy[t(matLT),]
points(xy$x,xy$y,pch=21,bg="red",cex=1.5)
# Add grid lines for perceptual grouping
hline <- seq(3.5,nVar,by=3)
vline <- seq(3.5,nModel,by=3)
abline(h=hline, col=gray(.8))
abline(v=vline, col=gray(.8))
box()  #  draw the plot border
# put labels in the plot margins
mtext(rownames(matLT),side=2,at=nVar:1,
line=.3,las=1)
newColNam = substring(colnames(matLT),1,2)
mtext(newColNam,at=1:nModel, side=3)
# reset the device plot margin
par(oldPar)
## End===========================
# The results looks like forward stepwise regression
# through 6 variables. All the previously selected
# variables are included
#
# In comparing the the 7 variable model
# to the six variable model
# which variables were added and which
# were dropped?
regfit.full=regsubsets(Salary~.,data=Hitters,
nvmax=19)
reg.summary=summary(regfit.full)
names(reg.summary)
# R-squared in percent
round( 100*reg.summary$rsq, 1)
# Extra:  for a comparison
# RSS is the residual sum of squares
# MSE = RSS/n
# Full model MSE
model10.MSE = reg.summary$rss[10]/nrow(Hitters)
model10.MSE
# 2.3 Four plots per page showing 4 criteria
#     and with dots indicating best models
#
# Uses R base level graphics
# mfrow allocates space putting plot
# panels in row and columns
# Each plot() command advances to the
# next plot.  The points() function
# add points to the currently
# active plot
windows(width=6, height=6)
par(mfrow=c(2,2))
xlab="Number of Variable"
# 1st row 1st  column
plot(reg.summary$rss,xlab=xlab,
ylab="RSS",type="l")
# 1st row 2nd  column
plot(reg.summary$adjr2,xlab=xlab,
ylab="Adjusted RSq",type="l")
loc <- which.max(reg.summary$adjr2)
loc
points(loc,reg.summary$adjr2[loc],
col="red",cex=2,pch=20)
# 2nd row 1st column
plot(reg.summary$cp,xlab=xlab,
ylab="Cp",type='l')
loc <- which.min(reg.summary$cp)
loc
points(loc,reg.summary$cp[loc],
col="red",cex=2,pch=20)
# 2nd row 2nd column
plot(reg.summary$bic,xlab=xlab,
ylab="BIC",type='l')
loc <-  which.min(reg.summary$bic)
loc
points(loc,reg.summary$bic[loc],
col="red",cex=2,pch=20)
# Plot redesign comments
# Putting multiple panels in a plot with
# mfrow() has been convenient for many
# people over the years but often wastes
# space.  If the window height is
# small the limited y-axis resolution may
# result in unreadable y-axis tick mark
# labels.
#
# There is common x-axis. There could be 4
# vertically aligned panels with common x-axis
# grid lines.  Putting  grid line labels at the
# bottom of the stack would suffice.
#
# We could keep the two column design and
# remove all the wasted space better the
# two rows.
# Regression comments:
# The BIC criterion has a minimum at
# six variables. The BIC is often chosen
# the preferred model selection criterion.
#
# The adjusted R-squared has a minimum at
# 11 variables but is not increasing very
# quickly after six variables.  It seems
# reasonable to consider a six variable model
# and look at the coefficients.
coef(regfit.full,6)
# 2.4 Redesign comments for ISLR plots
#     showing the models from best
#     at the top to the worst at bottom
#     for the given criterion
#
#     Plot size matters for readability.
#
#     The color encoding have poor
#     perceptual accuracy of extraction
#     The chosen mapping of values to
#     to gray provide the best gray
#     level discrimination for the
regfit.full=regsubsets(Salary~.,Hitters)
reg.summary <- summary(regfit.full)
reg.summary
mat <- reg.summary$outmat
mat
rownames(mat)
mat[1,]
rownames(mat) <- 1:nrow(mat)
mat<- mat[1:8,]
mat
matL <- ifelse(mat==" ",FALSE,TRUE)
# Transpose the matrix
matLT <- t(matL)
matLT
usedVar <- apply(matLT,1,any)
matLT <-matLT[usedVar,]
matLT
# Sort the remaining variables by
# the number of time used rows
usedN <- apply(matLT,1,sum)
matLT <- matLT[order(usedN,decreasing=TRUE),]
# Find the number of rows and
# columns used to set up
# axes for the plot
nModel <- ncol(matLT)
nVar <- nrow(matLT)
rx <- c(.5,nModel+.5)
ry <- c(.5,nVar+.5)
## Select and run lines
#  from here to
#  ##End==============
windows(width=4.5,height=4)
# Set the plot margins in inches
# bottom, left, top, right
# and save the previous setting
oldPar <- par(mai=c(.2,1.3,1.1,.2))
# Just setup the plot
plot(rx,ry,type='n',axes=FALSE,
xlab='', ylab='', cex=.85,
main=paste("Best 8 Salary Models",
"with a Mean and 1 to 8 Variables",sep="\n"))
# Construct coordinates for rows
# and columns. Omit those with
# FALSE in the matrix and
# plot the remaining points
xy <- expand.grid(list(x=1:nModel,y=nVar:1))
xy <- xy[t(matLT),]
points(xy$x,xy$y,pch=21,bg="red",cex=1.5)
# Add grid lines for perceptual grouping
hline <- seq(3.5,nVar,by=3)
vline <- seq(3.5,nModel,by=3)
abline(h=hline, col=gray(.8))
abline(v=vline, col=gray(.8))
box()  #  draw the plot border
# put labels in the plot margins
mtext(rownames(matLT),side=2,at=nVar:1,
line=.3,las=1)
newColNam = substring(colnames(matLT),1,2)
mtext(newColNam,at=1:nModel, side=3)
# reset the device plot margin
par(oldPar)
xy <- xy[t(matLT),]
coef(regfit.full,6)
mat <- reg.summary$outmat
mat
rownames(mat)
#   minor edits by Daniel Carr
#   minor edits by Daniel Carr
install.packages(c("cluster", "codetools", "colorspace", "evaluate", "mgcv", "R6", "reshape2", "shiny", "splines2", "stringi", "survival"))
install.packages("devtools")
load("/Users/hp/Documents/GMU/CSI773/ShinySubset/CensusMap/R3_2.RData")
library(shiny)
runApp("/Users/hp/Documents/GMU/CSI773/ShinySubset") # just a path to the folder
runApp("/Users/hp/Documents/GMU/CSI773/ShinySubset/CensusMap") # just a path to the folder
install.packages("maps")
library("maps", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library(shiny)
runApp("/Users/hp/Documents/GMU/CSI773/ShinySubset/CensusMap") # just a path to the folder
install.packages("mapproj")
library(shiny)
runApp("/Users/hp/Documents/GMU/CSI773/ShinySubset/CensusMap") # just a path to the folder
library(shiny)
runApp("/Users/hp/Documents/GMU/CSI773/ShinySubset/mat4BinSmooth") # just a path to the folder
install.packages("elastic")
connect()
connection()
Search(index="plos", type="article", sort="title", q="antibody", size=1)$hits$hits
library("elastic", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("elastic")
Search(index="plos", type="article", sort="title", q="antibody", size=1)$hits$hits
Search(index="plos", type="article", sort="title", q="antibody", size=1)$hits$hits
connect()
Search(index="plos", type="article", sort="title", q="antibody", size=1)$hits$hits
Search(index="cbp", type="wait-times")$hits$hits
shiny::runApp('workbench/projects/skunk/shiny/r-data/wait-times/CensusMap')
install.packages("leaflet")
ui <- bootstrapPage(
tags$style(type="text/css", "html, body {width:100%;height:100%}"),
leafletOutput("Map", width="100%", height="100%"),
absolutePanel(top=10, right=10,
selectInput("location", "Community", c("", locs$loc), selected=""),
conditionalPanel("input.location !== null && input.location !== ''",
actionButton("button_plot_and_table", "View Plot/Table", class="btn-block"))
)
)
install.packages("leaflet")
ui <- bootstrapPage(
tags$style(type="text/css", "html, body {width:100%;height:100%}"),
leafletOutput("Map", width="100%", height="100%"),
absolutePanel(top=10, right=10,
selectInput("location", "Community", c("", locs$loc), selected=""),
conditionalPanel("input.location !== null && input.location !== ''",
actionButton("button_plot_and_table", "View Plot/Table", class="btn-block"))
)
)
install.packages("leaflet")
ui <- bootstrapPage(
tags$style(type="text/css", "html, body {width:100%;height:100%}"),
leafletOutput("Map", width="100%", height="100%"),
absolutePanel(top=10, right=10,
selectInput("location", "Community", c("", locs$loc), selected=""),
conditionalPanel("input.location !== null && input.location !== ''",
actionButton("button_plot_and_table", "View Plot/Table", class="btn-block"))
)
)
server <- function(input, output, session) {
acm_defaults <- function(map, x, y) addCircleMarkers(map, x, y, radius=6, color="black", fillColor="orange", fillOpacity=1, opacity=1, weight=2, stroke=TRUE, layerId="Selected")
output$Map <- renderLeaflet({
leaflet() %>% setView(lon, lat, 4) %>% addTiles() %>%
addCircleMarkers(data=locs, radius=6, color="black", stroke=FALSE, fillOpacity=0.5, group="locations", layerId = ~loc)
})
observeEvent(input$Map_marker_click, { # update the map markers and view on map clicks
p <- input$Map_marker_click
proxy <- leafletProxy("Map")
if(p$id=="Selected"){
proxy %>% removeMarker(layerId="Selected")
} else {
proxy %>% setView(lng=p$lng, lat=p$lat, input$Map_zoom) %>% acm_defaults(p$lng, p$lat)
}
})
observeEvent(input$Map_marker_click, { # update the location selectInput on map clicks
p <- input$Map_marker_click
if(!is.null(p$id)){
if(is.null(input$location) || input$location!=p$id) updateSelectInput(session, "location", selected=p$id)
}
})
observeEvent(input$location, { # update the map markers and view on location selectInput changes
p <- input$Map_marker_click
p2 <- subset(locs, loc==input$location)
proxy <- leafletProxy("Map")
if(nrow(p2)==0){
proxy %>% removeMarker(layerId="Selected")
} else if(length(p$id) && input$location!=p$id){
proxy %>% setView(lng=p2$lon, lat=p2$lat, input$Map_zoom) %>% acm_defaults(p2$lon, p2$lat)
} else if(!length(p$id)){
proxy %>% setView(lng=p2$lon, lat=p2$lat, input$Map_zoom) %>% acm_defaults(p2$lon, p2$lat)
}
})
}
shinyApp(ui, server)
library("leaflet", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
ui <- bootstrapPage(
tags$style(type="text/css", "html, body {width:100%;height:100%}"),
leafletOutput("Map", width="100%", height="100%"),
absolutePanel(top=10, right=10,
selectInput("location", "Community", c("", locs$loc), selected=""),
conditionalPanel("input.location !== null && input.location !== ''",
actionButton("button_plot_and_table", "View Plot/Table", class="btn-block"))
)
)
server <- function(input, output, session) {
acm_defaults <- function(map, x, y) addCircleMarkers(map, x, y, radius=6, color="black", fillColor="orange", fillOpacity=1, opacity=1, weight=2, stroke=TRUE, layerId="Selected")
output$Map <- renderLeaflet({
leaflet() %>% setView(lon, lat, 4) %>% addTiles() %>%
addCircleMarkers(data=locs, radius=6, color="black", stroke=FALSE, fillOpacity=0.5, group="locations", layerId = ~loc)
})
observeEvent(input$Map_marker_click, { # update the map markers and view on map clicks
p <- input$Map_marker_click
proxy <- leafletProxy("Map")
if(p$id=="Selected"){
proxy %>% removeMarker(layerId="Selected")
} else {
proxy %>% setView(lng=p$lng, lat=p$lat, input$Map_zoom) %>% acm_defaults(p$lng, p$lat)
}
})
observeEvent(input$Map_marker_click, { # update the location selectInput on map clicks
p <- input$Map_marker_click
if(!is.null(p$id)){
if(is.null(input$location) || input$location!=p$id) updateSelectInput(session, "location", selected=p$id)
}
})
observeEvent(input$location, { # update the map markers and view on location selectInput changes
p <- input$Map_marker_click
p2 <- subset(locs, loc==input$location)
proxy <- leafletProxy("Map")
if(nrow(p2)==0){
proxy %>% removeMarker(layerId="Selected")
} else if(length(p$id) && input$location!=p$id){
proxy %>% setView(lng=p2$lon, lat=p2$lat, input$Map_zoom) %>% acm_defaults(p2$lon, p2$lat)
} else if(!length(p$id)){
proxy %>% setView(lng=p2$lon, lat=p2$lat, input$Map_zoom) %>% acm_defaults(p2$lon, p2$lat)
}
})
}
shinyApp(ui, server)
ui <- bootstrapPage(
tags$style(type="text/css", "html, body {width:100%;height:100%}"),
leafletOutput("Map", width="100%", height="100%"),
absolutePanel(top=10, right=10,
selectInput("location", "Community", c("", locs$loc), selected=""),
conditionalPanel("input.location !== null && input.location !== ''",
actionButton("button_plot_and_table", "View Plot/Table", class="btn-block"))
)
)
shinyApp(ui, server)
library(shiny)
library(dplyr)
library(leaflet)
source('workbench/projects/skunk/shiny/r-data/wait-times.R')
runApp('workbench/projects/skunk/shiny/r-data/wait-times')
runApp('workbench/projects/skunk/shiny/r-data/wait-times')
shiny::runApp('workbench/projects/skunk/shiny/r-data/wait-times')
runApp('workbench/projects/skunk/shiny/r-data/wait-times')
install.packages(c("BH", "colorspace", "ggplot2", "git2r", "htmlwidgets", "knitr", "mgcv", "Rcpp", "scales", "SparseM", "yaml"))
library(MASS)
library(rgl)
setwd("~/workbench/projects/skunk/shiny/r-data/wait-times")
wdh<-read.table(file='WaitTimesPerHour.csv',sep=',',header=TRUE)
library(car)
scatterplotMatrix(~AvgWait+Count+Booths|Airport, data=wdn,main="Scatterplots and regression lines per airport")
wdh<-read.table(file='WaitTimesPerHour.csv',sep=',',header=TRUE)
scatterplotMatrix(~AvgWait+Count+Booths|Airport, data=wdn,main="Scatterplots and regression lines per airport")
library(car)
wdn<-read.table(file='WaitTimesPerDay.csv',sep=',',header=TRUE)
scatterplotMatrix(~AvgWait+Count+Booths|Airport, data=wdn,main="Scatterplots and regression lines per airport")
warnings()
shiny::runApp()
runApp()
runApp()
runApp()
scatterplotMatrix(~AvgWait+Count+Booths|Airport, data=wd,main="Scatterplots and regression lines per airport")
wd<-read.table(file='WaitTimesPerDay.csv',sep=',',header=TRUE)
scatterplotMatrix(~AvgWait+Count+Booths|Airport, data=wd,main="Scatterplots and regression lines per airport")
runApp()
install.packages("devtools")
devtools::install_github('jcheng5/googleCharts')
View(wd)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
